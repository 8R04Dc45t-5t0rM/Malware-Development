#include<stdio.h>
#include<windows.h>
#include<winternl.h>
#include<shlwapi.h>


typedef HMODULE (WINAPI* newLoadLibrary)(LPCSTR);

HMODULE getDllBase(LPWSTR Name){
    PPEB PEB = (PPEB) __readgsqword(0x60);
    PPEB_LDR_DATA LDR = PEB->Ldr;
    PLIST_ENTRY LoadedModules = &LDR->InMemoryOrderModuleList;

    PLDR_DATA_TABLE_ENTRY LDRModule=NULL;

    for(PLIST_ENTRY temp = LoadedModules->Flink; temp != LoadedModules ; temp = temp->Flink){
        LDRModule = (PLDR_DATA_TABLE_ENTRY)((PBYTE)temp-sizeof(LIST_ENTRY));
        if(StrStrIW(LDRModule->FullDllName.Buffer,Name) != NULL)
            return (HMODULE) LDRModule->DllBase;   
    }
    return NULL;
}

void printToFile(char *functionName){
    FILE *exportedFuncs = fopen("ExportedFunctions.txt","a");
    fprintf(exportedFuncs,"%s \n",functionName);
}

void printInfo(PBYTE StartingAddress, PIMAGE_DOS_HEADER DOS,PIMAGE_NT_HEADERS NT, PIMAGE_EXPORT_DIRECTORY EXPORT_Directory){
    printf("BaseAddress 0x%p\n\n",StartingAddress);

    printf("DOS at offset 0x%p\n",(PBYTE)DOS-StartingAddress);
    printf("DOS signature : 0x%x\n",DOS->e_magic);
    printf("Next PE at 0x%x\n\n",DOS->e_lfanew);

    printf("NT at offset 0x%p\n",(PBYTE)NT-StartingAddress);
    printf("NT signature : 0x%x\n\n",NT->Signature);

    printf("Export Directory at 0x%p \n",EXPORT_Directory);
    printf("Function addr 0x%p\n", (DWORD*)(EXPORT_Directory->AddressOfFunctions + StartingAddress));
    printf("Names 0x%p\n",(DWORD*) (EXPORT_Directory->AddressOfNames + StartingAddress));
    printf("Ordinals 0x%p\n",(WORD*)(EXPORT_Directory->AddressOfNameOrdinals + StartingAddress));


}

FARPROC WINAPI getFunction(HMODULE ModuleHandle,char * Name) {
    PBYTE StartingAddress = (PBYTE) (ModuleHandle);

    PIMAGE_DOS_HEADER DOS = (PIMAGE_DOS_HEADER) StartingAddress;

    PIMAGE_NT_HEADERS NT = (PIMAGE_NT_HEADERS) (DOS->e_lfanew + StartingAddress);

    PIMAGE_EXPORT_DIRECTORY EXPORT_Directory = (PIMAGE_EXPORT_DIRECTORY)(NT->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress+StartingAddress);
    DWORD *FuncRefs = (DWORD*)(EXPORT_Directory->AddressOfFunctions + StartingAddress);
    DWORD *NameAddrs=(DWORD*) (EXPORT_Directory->AddressOfNames + StartingAddress);
    WORD *Ords = (WORD*)(EXPORT_Directory->AddressOfNameOrdinals + StartingAddress);

    printInfo(StartingAddress,DOS,NT,EXPORT_Directory);
    
    void *ProcAddr = NULL;
    // resolve as Name :
    if(((DWORD_PTR)Name >> 16)){
        char *  NameEntry = NULL;
        for(DWORD i=0;i<EXPORT_Directory->NumberOfNames;i++){
            NameEntry = (char*)(NameAddrs[i]+StartingAddress);
            printToFile(NameEntry);
                if(strcmpi(Name,NameEntry) == 0){
                ProcAddr = (StartingAddress +(DWORD_PTR)FuncRefs[Ords[i]]);
                break;
            }
        }
    }    
 
    // resolve as Ordinal
    else{
        WORD ordinalValue = (WORD)Name & 0xFFFFF;
        if(ordinalValue > EXPORT_Directory->Base && ordinalValue < EXPORT_Directory->Base + EXPORT_Directory->NumberOfNames){
            ProcAddr =  (FARPROC)(FuncRefs[ordinalValue-EXPORT_Directory->Base] + StartingAddress);
        }      

        else{
            printf("This OrdinalValue isnt in this DLL\n");
            return NULL;
        }
    }
 
    if(ProcAddr >= EXPORT_Directory && ProcAddr < EXPORT_Directory + NT->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size){
        printf("\nThis is a forwarder function ... \n");

        char *ForwardedDLL = _strdup((char*)ProcAddr);
        char *ForwardedFunction = strchr(ForwardedDLL,'.');
        *ForwardedFunction =0;
        ForwardedFunction++;
        
       printf("NewModule (%s), NewFunction (%s)\n",ForwardedDLL,ForwardedFunction);
       printf("\n________ LOADED DLL DATA _____________ \n");

        newLoadLibrary LoadLib= (newLoadLibrary) getFunction(getDllBase(L"Kernel32.dll"),"LoadLibraryA");
        HMODULE FWDDll = LoadLib(ForwardedDLL);
        free(ForwardedDLL);
    
        if(!FWDDll) return NULL;
        ProcAddr = getFunction(FWDDll,ForwardedFunction);
       
        printf("___________________________________\n");
    }

    return (FARPROC)ProcAddr;

}
